// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/product/usecase.go

// Package mock_product is a generated GoMock package.
package mock_product

import (
	errors "go_practice/9_clean_arch_db/internal/helpers/errors"
	models "go_practice/9_clean_arch_db/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductUsecase is a mock of ProductUsecase interface.
type MockProductUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockProductUsecaseMockRecorder
}

// MockProductUsecaseMockRecorder is the mock recorder for MockProductUsecase.
type MockProductUsecaseMockRecorder struct {
	mock *MockProductUsecase
}

// NewMockProductUsecase creates a new mock instance.
func NewMockProductUsecase(ctrl *gomock.Controller) *MockProductUsecase {
	mock := &MockProductUsecase{ctrl: ctrl}
	mock.recorder = &MockProductUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductUsecase) EXPECT() *MockProductUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductUsecase) Create(product models.Product) (uint64, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", product)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductUsecaseMockRecorder) Create(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductUsecase)(nil).Create), product)
}

// DeleteById mocks base method.
func (m *MockProductUsecase) DeleteById(id uint64) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", id)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockProductUsecaseMockRecorder) DeleteById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockProductUsecase)(nil).DeleteById), id)
}

// GetById mocks base method.
func (m *MockProductUsecase) GetById(id uint64) (*models.Product, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockProductUsecaseMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockProductUsecase)(nil).GetById), id)
}

// List mocks base method.
func (m *MockProductUsecase) List() ([]*models.Product, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*models.Product)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockProductUsecaseMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProductUsecase)(nil).List))
}

// UpdateById mocks base method.
func (m *MockProductUsecase) UpdateById(productId uint64, updatedProduct models.Product) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", productId, updatedProduct)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockProductUsecaseMockRecorder) UpdateById(productId, updatedProduct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockProductUsecase)(nil).UpdateById), productId, updatedProduct)
}
