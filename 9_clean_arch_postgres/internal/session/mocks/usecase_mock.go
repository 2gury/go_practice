// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/session/usecase.go

// Package mock_session is a generated GoMock package.
package mock_session

import (
	errors "go_practice/9_clean_arch_db/internal/helpers/errors"
	models "go_practice/9_clean_arch_db/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionUsecase is a mock of SessionUsecase interface.
type MockSessionUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSessionUsecaseMockRecorder
}

// MockSessionUsecaseMockRecorder is the mock recorder for MockSessionUsecase.
type MockSessionUsecaseMockRecorder struct {
	mock *MockSessionUsecase
}

// NewMockSessionUsecase creates a new mock instance.
func NewMockSessionUsecase(ctrl *gomock.Controller) *MockSessionUsecase {
	mock := &MockSessionUsecase{ctrl: ctrl}
	mock.recorder = &MockSessionUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionUsecase) EXPECT() *MockSessionUsecaseMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockSessionUsecase) Check(sessValue string) (*models.Session, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", sessValue)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockSessionUsecaseMockRecorder) Check(sessValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSessionUsecase)(nil).Check), sessValue)
}

// Create mocks base method.
func (m *MockSessionUsecase) Create(userId uint64) (*models.Session, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSessionUsecaseMockRecorder) Create(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionUsecase)(nil).Create), userId)
}

// Delete mocks base method.
func (m *MockSessionUsecase) Delete(sessValue string) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sessValue)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSessionUsecaseMockRecorder) Delete(sessValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionUsecase)(nil).Delete), sessValue)
}
