// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/session/delivery/grpc/session_grpc.pb.go

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	grpc "go_practice/9_clean_arch_db/internal/session/delivery/grpc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc0 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockSessionServiceClient is a mock of SessionServiceClient interface.
type MockSessionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServiceClientMockRecorder
}

// MockSessionServiceClientMockRecorder is the mock recorder for MockSessionServiceClient.
type MockSessionServiceClientMockRecorder struct {
	mock *MockSessionServiceClient
}

// NewMockSessionServiceClient creates a new mock instance.
func NewMockSessionServiceClient(ctrl *gomock.Controller) *MockSessionServiceClient {
	mock := &MockSessionServiceClient{ctrl: ctrl}
	mock.recorder = &MockSessionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionServiceClient) EXPECT() *MockSessionServiceClientMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockSessionServiceClient) Check(ctx context.Context, in *grpc.SessionValue, opts ...grpc0.CallOption) (*grpc.Session, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Check", varargs...)
	ret0, _ := ret[0].(*grpc.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockSessionServiceClientMockRecorder) Check(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSessionServiceClient)(nil).Check), varargs...)
}

// Create mocks base method.
func (m *MockSessionServiceClient) Create(ctx context.Context, in *grpc.SessionUserIdValue, opts ...grpc0.CallOption) (*grpc.Session, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*grpc.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSessionServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionServiceClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockSessionServiceClient) Delete(ctx context.Context, in *grpc.SessionValue, opts ...grpc0.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSessionServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionServiceClient)(nil).Delete), varargs...)
}

// MockSessionServiceServer is a mock of SessionServiceServer interface.
type MockSessionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServiceServerMockRecorder
}

// MockSessionServiceServerMockRecorder is the mock recorder for MockSessionServiceServer.
type MockSessionServiceServerMockRecorder struct {
	mock *MockSessionServiceServer
}

// NewMockSessionServiceServer creates a new mock instance.
func NewMockSessionServiceServer(ctrl *gomock.Controller) *MockSessionServiceServer {
	mock := &MockSessionServiceServer{ctrl: ctrl}
	mock.recorder = &MockSessionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionServiceServer) EXPECT() *MockSessionServiceServerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockSessionServiceServer) Check(arg0 context.Context, arg1 *grpc.SessionValue) (*grpc.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1)
	ret0, _ := ret[0].(*grpc.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockSessionServiceServerMockRecorder) Check(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSessionServiceServer)(nil).Check), arg0, arg1)
}

// Create mocks base method.
func (m *MockSessionServiceServer) Create(arg0 context.Context, arg1 *grpc.SessionUserIdValue) (*grpc.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*grpc.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSessionServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionServiceServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockSessionServiceServer) Delete(arg0 context.Context, arg1 *grpc.SessionValue) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSessionServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionServiceServer)(nil).Delete), arg0, arg1)
}

// mustEmbedUnimplementedSessionServiceServer mocks base method.
func (m *MockSessionServiceServer) mustEmbedUnimplementedSessionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSessionServiceServer")
}

// mustEmbedUnimplementedSessionServiceServer indicates an expected call of mustEmbedUnimplementedSessionServiceServer.
func (mr *MockSessionServiceServerMockRecorder) mustEmbedUnimplementedSessionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSessionServiceServer", reflect.TypeOf((*MockSessionServiceServer)(nil).mustEmbedUnimplementedSessionServiceServer))
}

// MockUnsafeSessionServiceServer is a mock of UnsafeSessionServiceServer interface.
type MockUnsafeSessionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSessionServiceServerMockRecorder
}

// MockUnsafeSessionServiceServerMockRecorder is the mock recorder for MockUnsafeSessionServiceServer.
type MockUnsafeSessionServiceServerMockRecorder struct {
	mock *MockUnsafeSessionServiceServer
}

// NewMockUnsafeSessionServiceServer creates a new mock instance.
func NewMockUnsafeSessionServiceServer(ctrl *gomock.Controller) *MockUnsafeSessionServiceServer {
	mock := &MockUnsafeSessionServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSessionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSessionServiceServer) EXPECT() *MockUnsafeSessionServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSessionServiceServer mocks base method.
func (m *MockUnsafeSessionServiceServer) mustEmbedUnimplementedSessionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSessionServiceServer")
}

// mustEmbedUnimplementedSessionServiceServer indicates an expected call of mustEmbedUnimplementedSessionServiceServer.
func (mr *MockUnsafeSessionServiceServerMockRecorder) mustEmbedUnimplementedSessionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSessionServiceServer", reflect.TypeOf((*MockUnsafeSessionServiceServer)(nil).mustEmbedUnimplementedSessionServiceServer))
}
