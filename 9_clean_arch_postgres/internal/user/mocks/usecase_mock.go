// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/user/usecase.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	errors "go_practice/9_clean_arch_db/internal/helpers/errors"
	models "go_practice/9_clean_arch_db/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserUsecase is a mock of UserUsecase interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// ComparePasswordAndHash mocks base method.
func (m *MockUserUsecase) ComparePasswordAndHash(usr *models.User, password string) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePasswordAndHash", usr, password)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// ComparePasswordAndHash indicates an expected call of ComparePasswordAndHash.
func (mr *MockUserUsecaseMockRecorder) ComparePasswordAndHash(usr, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePasswordAndHash", reflect.TypeOf((*MockUserUsecase)(nil).ComparePasswordAndHash), usr, password)
}

// ComparePasswords mocks base method.
func (m *MockUserUsecase) ComparePasswords(password, repeatedPassword string) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePasswords", password, repeatedPassword)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// ComparePasswords indicates an expected call of ComparePasswords.
func (mr *MockUserUsecaseMockRecorder) ComparePasswords(password, repeatedPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePasswords", reflect.TypeOf((*MockUserUsecase)(nil).ComparePasswords), password, repeatedPassword)
}

// Create mocks base method.
func (m *MockUserUsecase) Create(arg0 *models.User) (uint64, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserUsecaseMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserUsecase)(nil).Create), arg0)
}

// DeleteUserById mocks base method.
func (m *MockUserUsecase) DeleteUserById(id uint64) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserById", id)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// DeleteUserById indicates an expected call of DeleteUserById.
func (mr *MockUserUsecaseMockRecorder) DeleteUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserById", reflect.TypeOf((*MockUserUsecase)(nil).DeleteUserById), id)
}

// GetByEmail mocks base method.
func (m *MockUserUsecase) GetByEmail(email string) (*models.User, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserUsecaseMockRecorder) GetByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserUsecase)(nil).GetByEmail), email)
}

// GetById mocks base method.
func (m *MockUserUsecase) GetById(id uint64) (*models.User, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserUsecaseMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserUsecase)(nil).GetById), id)
}

// UpdateUserPassword mocks base method.
func (m *MockUserUsecase) UpdateUserPassword(usr *models.User) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", usr)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockUserUsecaseMockRecorder) UpdateUserPassword(usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockUserUsecase)(nil).UpdateUserPassword), usr)
}
